var documenterSearchIndex = {"docs":
[{"location":"api/#LMDB","page":"Index","title":"LMDB","text":"","category":"section"},{"location":"api/#Exported","page":"Index","title":"Exported","text":"","category":"section"},{"location":"api/","page":"Index","title":"Index","text":"Modules = [LMDB]\nOrder   = [:function, :type]\nPrivate = false","category":"page"},{"location":"api/#Base.Iterators.drop-Tuple{Transaction, DBI}","page":"Index","title":"Base.Iterators.drop","text":"Empty or delete+close a database.\n\nIf parameter delete is false DB will be emptied, otherwise DB will be deleted from the environment and DB handle will be closed\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.close-Tuple{Cursor}","page":"Index","title":"Base.close","text":"Close a cursor\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.close-Tuple{Environment, DBI}","page":"Index","title":"Base.close","text":"Close a database handle\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.close-Tuple{Environment}","page":"Index","title":"Base.close","text":"Close the environment and release the memory map\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.count-Tuple{Cursor}","page":"Index","title":"Base.count","text":"Return count of duplicates for current key\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.delete!","page":"Index","title":"Base.delete!","text":"Delete items from a database\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.delete!-Tuple{Cursor}","page":"Index","title":"Base.delete!","text":"Delete current key/data pair to which the cursor refers\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.get-Union{Tuple{T}, Tuple{Cursor, Any, Type{T}}, Tuple{Cursor, Any, Type{T}, LMDB.LibLMDB.MDB_cursor_op}} where T","page":"Index","title":"Base.get","text":"Retrieve by cursor.\n\nThis function retrieves key/data pairs from the database.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.get-Union{Tuple{T}, Tuple{Transaction, DBI, Any, Type{T}}} where T","page":"Index","title":"Base.get","text":"Get items from a database\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Tuple{Environment, Symbol}","page":"Index","title":"Base.getindex","text":"Get environment flags and parameters\n\ngetindex accepts folowing parameters:\n\nenv db environment object\noption symbol which indicates parameter. Currently supported parameters:\nFlags\nReaders\nKeySize\n\nNote: Consult LMDB documentation for particual values of environment parameters and flags.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.isopen-Tuple{Cursor}","page":"Index","title":"Base.isopen","text":"Check if cursor is open\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.isopen-Tuple{DBI}","page":"Index","title":"Base.isopen","text":"Check if database is open\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.isopen-Tuple{Environment}","page":"Index","title":"Base.isopen","text":"Check if environment is open\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.isopen-Tuple{Transaction}","page":"Index","title":"Base.isopen","text":"Check if transaction is open.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.keys-Union{Tuple{T}, Tuple{Cursor, Type{T}}} where T","page":"Index","title":"Base.keys","text":"Return iterator over keys of uniform, specified type\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.open","page":"Index","title":"Base.open","text":"Open a database in the environment\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.open-2","page":"Index","title":"Base.open","text":"Wrapper of DBI open for do construct\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.open-Tuple{Environment, String}","page":"Index","title":"Base.open","text":"Open an environment handle\n\nopen function accepts folowing parameters:\n\nenv db environment object\npath directory in which the database files reside\nflags defines special options for the environment\nmode UNIX permissions to set on created files\n\nNote: A database directory must exist and be writable.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.open-Tuple{Function, Transaction, DBI}","page":"Index","title":"Base.open","text":"Wrapper of Cursor open for do construct\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.open-Tuple{Transaction, DBI}","page":"Index","title":"Base.open","text":"Create a cursor\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.put!-Tuple{Cursor, Any, Any}","page":"Index","title":"Base.put!","text":"Store by cursor.\n\nThis function stores key/data pairs into the database. The cursor is positioned at the new item, or on failure usually near it.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.put!-Tuple{Transaction, DBI, Any, Any}","page":"Index","title":"Base.put!","text":"Store items into a database\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.reset-Tuple{Transaction}","page":"Index","title":"Base.reset","text":"Reset a read-only transaction\n\nAbort the transaction like abort, but keep the transaction handle.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Tuple{Environment, UInt32, Symbol}","page":"Index","title":"Base.setindex!","text":"Set environment flags and parameters\n\nsetindex! accepts folowing parameters:\n\nenv db environment object\noption symbol which indicates parameter. Currently supported parameters:\nFlags\nReaders\nMapSize\nDBs\nvalue parameter value\n\nNote: Consult LMDB documentation for particual values of environment parameters and flags.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.abort-Tuple{Transaction}","page":"Index","title":"LMDB.abort","text":"Abandon all the operations of the transaction instead of saving them\n\nThe transaction and its cursors must not be used after, because its handle is freed.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.commit-Tuple{Transaction}","page":"Index","title":"LMDB.commit","text":"Commit all the operations of a transaction into the database\n\nThe transaction and its cursors must not be used after, because its handle is freed.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.create-Tuple{Function}","page":"Index","title":"LMDB.create","text":"Wrapper of create for do construct\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.create-Tuple{}","page":"Index","title":"LMDB.create","text":"Create an LMDB environment handle\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.database-Tuple{Cursor}","page":"Index","title":"LMDB.database","text":"Return the cursor's database\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.environment-Tuple{Function, String}","page":"Index","title":"LMDB.environment","text":"Wrapper of open for do construct\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.info-Tuple{Environment}","page":"Index","title":"LMDB.info","text":"Return information about the LMDB environment.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.isflagset-Tuple{Any, Any}","page":"Index","title":"LMDB.isflagset","text":"Check if binary flag is set in provided value\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.path-Tuple{Environment}","page":"Index","title":"LMDB.path","text":"Return the path that was used in open\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.renew-Tuple{Transaction, Cursor}","page":"Index","title":"LMDB.renew","text":"Renew a cursor\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.renew-Tuple{Transaction}","page":"Index","title":"LMDB.renew","text":"Renew a read-only transaction\n\nThis acquires a new reader lock for a transaction handle that had been released by reset. It must be called before a reset transaction may be used again.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.set!-Tuple{Environment, UInt32}","page":"Index","title":"LMDB.set!","text":"Set environment flags\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.start-Tuple{Environment}","page":"Index","title":"LMDB.start","text":"Create a transaction for use with the environment\n\nstart function creates a new transaction and returns Transaction object. It allows to set transaction flags with flags option.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.sync","page":"Index","title":"LMDB.sync","text":"Flush the data buffers to disk\n\n\n\n\n\n","category":"function"},{"location":"api/#LMDB.transaction-Tuple{Cursor}","page":"Index","title":"LMDB.transaction","text":"Return the cursor's transaction\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.unset!-Tuple{Environment, UInt32}","page":"Index","title":"LMDB.unset!","text":"Unset environment flags\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.Cursor","page":"Index","title":"LMDB.Cursor","text":"A handle to a cursor structure for navigating through a database.\n\n\n\n\n\n","category":"type"},{"location":"api/#LMDB.DBI","page":"Index","title":"LMDB.DBI","text":"A handle for an individual database in the DB environment.\n\n\n\n\n\n","category":"type"},{"location":"api/#LMDB.Environment","page":"Index","title":"LMDB.Environment","text":"A DB environment supports multiple databases, all residing in the same shared-memory map.\n\n\n\n\n\n","category":"type"},{"location":"api/#LMDB.LMDBError","page":"Index","title":"LMDB.LMDBError","text":"LMDB exception type\n\n\n\n\n\n","category":"type"},{"location":"api/#LMDB.Transaction","page":"Index","title":"LMDB.Transaction","text":"A database transaction. Every operation requires a transaction handle. All database operations require a transaction handle. Transactions may be read-only or read-write.\n\n\n\n\n\n","category":"type"},{"location":"api/#Not-Exported","page":"Index","title":"Not Exported","text":"","category":"section"},{"location":"api/","page":"Index","title":"Index","text":"Modules = [LMDB]\nOrder   = [:function, :type]\nPublic = false","category":"page"},{"location":"api/#Base.iterate-Tuple{LMDB.LMDBIterator, Any}","page":"Index","title":"Base.iterate","text":"Iterate over database\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.errormsg-Tuple{Int32}","page":"Index","title":"LMDB.errormsg","text":"Return a string describing a given error code\n\nFunction returns description of the error as a string. It accepts following arguments:\n\nerr::Int32: An error code.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.flags-Tuple{Transaction, DBI}","page":"Index","title":"LMDB.flags","text":"Retrieve the DB flags for a database handle\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.version-Tuple{}","page":"Index","title":"LMDB.version","text":"Return the LMDB library version and version information\n\nFunction returns tuple (VersionNumber, String) that contains a library version and a library version string.\n\n\n\n\n\n","category":"method"},{"location":"api/#LMDB.LMDBIterator","page":"Index","title":"LMDB.LMDBIterator","text":"Type to implement the Iterator interface\n\n\n\n\n\n","category":"type"},{"location":"manual/#Working-with-the-database","page":"Manual","title":"Working with the database","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"First, an LMDB environment needs to be created. The create function creates an Environment object that contains a DB environment handle.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"env = create()","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Before opening the environment, you can set its parameters. Environment parameters are set with the put! function, which accepts:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Environment object\noption symbol which indicates parameter name, and\nparameter value.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"env[:DBs] = 2","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Environment parameters can be read with the get function:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"env[:Readers]","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Next, an environment must be opened using open function that takes as a parameter the path to the directory where database files reside. Make sure that the database directory exists and is writable.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"open(env, \"./testdb\")","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"After opening the environment, create a transaction with the start function. It creates a new transaction and returns a Transaction object.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"txn = start(env)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Next step, you need to open database using the open function, which takes the transaction as an argument.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"dbi = open(txn)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Put key-value pair into the database with the put! function:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"put!(txn, dbi, \"key\", \"val\")","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Commit all the operations of a transaction into the database. The transaction and its cursors must not be used afterwards, because its handle has been freed.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"commit(txn)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"When you have finished working with the database, close it with a close call:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"close(env, dbi)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"After you finished working with the environment, it has to be closed to free resources:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"close(env)","category":"page"},{"location":"manual/#Complete-example","page":"Manual","title":"Complete example","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"env = create() # create new db environment\ntry\n    open(env, \"./testdb\") # open db environment !!! `testdb` must exist !!!\n    txn = start(env)      # start new transaction\n    dbi = open(txn)       # open database\n    try\n        put!(txn, dbi, \"key\", \"val\") # add key-value pair\n        commit(txn)                  # commit transaction\n    finally\n        close(env, dbi)  # close db\n    end\nfinally\n    close(env)           # close environment\nend","category":"page"},{"location":"#LMDB.jl","page":"Home","title":"LMDB.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LMDB.jl is a Julia package for interfacing with LMDB database.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Lightning Memory-Mapped Database (LMDB) is an ultra-fast, ultra-compact key-value embedded data store developed by Symas for the OpenLDAP Project. It uses memory-mapped files, so it has the read performance of a pure in-memory database while still offering the persistence of standard disk-based databases, and is only limited to the size of the virtual address space. This module provides a Julia interface to LMDB.","category":"page"}]
}
